#include<iostream>
#include<queue>
#include<stack>
#include<thread>
#include<stdlib.h>
#include<algorithm>

using namespace std;
using namespace std::this_thread; // sleep_for, sleep_until
using namespace std::chrono; // nanoseconds, system_clock, seconds

class node {
public:
	int connection[4];
	bool is_wall = false;
	int parent_node = -1;
	void add_connection(int top, int left, int buttom, int right) {
		connection[0] = top;
		connection[1] = left;
		connection[2] = buttom;
		connection[3] = right;

	}

};
class maze {
private:
	node* node_list;
	int maze_width;
	int maze_height;
	int no_node;

public:
	maze(int width, int hight, int* maze_matrix) {
		no_node = width * hight;
		maze_width = width;
		maze_height = hight;
		node_list = new node[no_node];

		//initializing all node connections
		for (int i = 0; i != no_node; i++) {

			int top = i - maze_width;
			int left = i - 1;
			int buttom = i + maze_width;
			int right = i + 1;

			if ((right / maze_width) > (i / maze_width)) {
				right = -1;
			}
			if ((i / maze_width) > (left / maze_width)) {
				left = -1;
			}
			if (top < 0) {
				top = -1;
			}
			if (buttom >= no_node) {
				buttom = -1;
			}

			node_list[i].add_connection(top, left, buttom, right);

		}
		make_maze(maze_matrix);
	}


	//adds wall at given position in maze
	void add_wall(int pos) {
		node_list[pos].is_wall = true;

	}


	//adds wall to the maze according to maze matrix
	void make_maze(int* maze_matrix) {
		for (int i = 0; i != no_node; i++) {

			if (maze_matrix[i] == 1) {
				int pos = i;
				add_wall(pos);
			}
		}
	}


	bool* path = NULL;		//stores the final path

	int source, destination;

	//depth first searches the maze for destinatin from source
	void DFS(int source, int destination) {
		this->source = source;
		this->destination = destination;
		
		cout << "\n source is" << source << "\ndestination is " << destination;
		sleep_until(system_clock::now() + 5s);
		stack <int> frontier_queue;
		bool* visited_node = new bool[no_node];
		bool* explored_node = new bool[no_node];
		path = new bool[no_node];
		for (int i = 0; i != no_node; i++) {
			visited_node[i] = 0;
			explored_node[i] = 0;
			path[i] = 0;
		}
		int result = source;


		frontier_queue.push(source);
		//cout << source << " was added to frontear" << endl;
		disp_maze(explored_node);
		sleep_until(system_clock::now() + 500ns);
		while (1) {
			system("cls");
			if (frontier_queue.empty()) {
				//system("Color 04");
				cout << "no solution !!" << endl;
				break;
			}
			result = frontier_queue.top();
			explored_node[result] = 1;
			frontier_queue.pop();
			cout << result << " was removed from frontear" << endl;

			/*cout << "visited nodes are:  ";
			for (int i = 0; i != no_node; i++) {
				if (visited_node[i] == 1) {
					cout << i << "  ";
				}
			}*/
			cout << endl;


			disp_maze(explored_node);
			visited_node[result] = 1;
			if (result == destination) {

				cout << endl << "Destination found in :" << result << " found !!" << endl;
				system("Color 06");

				break;
			}
			else {
				int to_add[4] = { 0,0,0,0 };
				for (int i = 0; i != 4; i++) {
					to_add[i] = node_list[result].connection[i];
				}
				bubble_sort(to_add, 4);//only 4 connections // size of array is 4
				for (int i = 0; i != 4; i++) {
					int adj_node = to_add[i];
					cout << endl;
					if (adj_node != -1 && visited_node[adj_node] != 1 && node_list[result].is_wall == false) {

						frontier_queue.push(adj_node);
						visited_node[adj_node] = 1;
						node_list[adj_node].parent_node = result;
						//cout << adj_node << " was added to frontear" << endl;
					}

				}
			}
			sleep_until(system_clock::now() + 900ns);
		}
	}

	void swap(int* a, int* b) {
		int temp = *a;
		*a = *b;
		*b = temp;
	}

	//implementation of bubble sort algorithm
	void bubble_sort(int* arr, int n) {

		for (int j = 0; j != n; j++) {
			int count = 0;                         //stores no of swaps made in one scan
			for (int i = 0; (i + 1) != n; i++) {
				if (heuristic(arr[i]) < heuristic(arr[i + 1])) {            //compare element with its right adjacent element
					count++;
					swap(&arr[i + 1], &arr[i]);
				}
			}
			if (count == 0)                            //if no swaps ware made then break
				break;                               //array is already sorted

		}

	}

	//displayes current status of maze
	void disp_maze(bool explored_node[]) {


		for (int i = 0; i != no_node; i++) {
			if (i % maze_width == 0) {
				cout << endl;
			}
			if (node_list[i].is_wall) {
				//cout << " # ";
				cout << char(219) << char(219);
			}
			else if (explored_node[i]) {
				if (i == destination) {
					cout << " D";
				}
				else if (i == source) {
					cout << " S";
				}
				else {
					//cout << " * ";
					cout << char(176) << char(176);
				}

			}
			else {
				if (i == destination) {
					cout << " D";
				}
				else if (i == source) {
					cout << " S";
				}
				else {
					cout << "  ";
				}

			}
		}
		cout << endl;

	}


	//displayes the path found by search algorithm
	void disp_path(int destination) {
		while (node_list[destination].parent_node != -1) {
			path[destination] = 1;
			destination = node_list[destination].parent_node;
		}
		for (int i = 0; i != no_node; i++) {
			if (i % maze_width == 0) {
				cout << endl;
			}
			if (node_list[i].is_wall) {
				//cout << " # ";
				cout << char(219) << char(219);
			}
			else if (path[i]) {
				if (path[i] == 1) { cout << " *"; }
				//else { cout << char(176) << char(176); }
			}
			else {
				cout << "  ";
			}
		}
		cout << endl;
	}
	void disp_sq_dist() {
		for (int i = 0; i != no_node; i++) {
			if (i % maze_width == 0) {
				cout << endl;
			}
			cout << heuristic(i) << "  ";
		}

		cout << "\n source is" << source << "\ndestination is " << destination;

	}
	int heuristic(int pos) {
		//int distance_from_destination = abs((pos % maze_width) - (destination % maze_width)) + abs((pos / maze_width) - (destination / maze_width));
		int distance_from_source= abs((pos % maze_width) - (source % maze_width)) + abs((pos / maze_width) - (source / maze_width));
		return distance_from_destination;
	}
};


int main() {
	int maze_matrix[10][13] =
	{ {1,1,1,1,1,1,1,1,1,1,1,1,1},
	  {1,0,1,0,1,0,1,0,0,0,0,0,1},
	  {1,0,1,0,0,0,1,0,1,1,1,0,1},
	  {1,0,0,0,1,1,1,0,0,0,0,0,1},
	  {1,0,1,0,0,0,0,0,1,1,1,0,1},
	  {1,0,1,0,1,1,1,0,1,0,0,0,1},
	  {1,0,1,0,1,0,0,0,1,1,1,0,1},
	  {1,0,1,0,1,1,1,0,1,0,1,0,1},
	  {1,0,0,0,0,0,0,0,0,0,1,0,1},
	  {1,1,1,1,1,1,1,1,1,1,1,1,1}
	};
	int maze_matrix2[10][10] = {
		{0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 1 ,0 ,1 ,0 ,0},
		{0, 0, 0, 1, 0, 1 ,0 ,0 ,0 ,0},
		{0 ,1 ,0 ,1 ,0 ,1, 0, 1 ,1, 0},
		{0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0},
		{0, 1, 1, 1 ,0 ,1 ,0 ,1 ,0 ,1},
		{0 ,1, 0, 0, 0, 1, 0, 1, 0, 1},
		{0 ,1, 0, 1 ,1, 1, 0 ,1 ,0 ,0 },
		{1, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
		{0, 0, 0, 0, 1, 1, 1, 1, 0, 0 }

	};
	maze M(10, 10, &maze_matrix2[0][0]);


	M.DFS(14, 81);
	M.disp_path(81);
	M.disp_sq_dist();
	


}
